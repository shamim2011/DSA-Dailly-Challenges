// Approach - 1 :  Brute Force Simulation(TLE)
// T.C - O(n²)
// S.C - O(1)

class Solution {
    public int maximumEnergy(int[] energy, int k) {
        int ans = Integer.MIN_VALUE; // Initialize answer with the smallest possible integer
        
        // Try starting from every index i
        for (int i = 0; i < energy.length; i++) {
            int j = i;
            int sum = 0;
            
            // Jump ahead by k steps each time and accumulate energy
            while (j < energy.length) {
                sum += energy[j];
                j += k;
            }
            
            // Update the maximum energy found so far
            ans = Math.max(ans, sum);
        }
        
        return ans; // Return the maximum total energy achievable
    }
}


// Approach - 2 :  Dynamic Programming with Jump Intervals
// T.C - O(n)
// S.C - O(n)


class Solution {
    public int maximumEnergy(int[] energy, int k) {
        int n = energy.length;
        int ans = Integer.MIN_VALUE;  // To store the maximum energy sum found so far
        int[] vis = new int[n];       // To mark visited indices (avoid recomputation)
        Arrays.fill(vis, 0);
        
        int sum = 0;
        // Iterate through all indices
        for (int i = 0; i < n; i++) {
            if (vis[i] == 1) continue;  // Skip if already processed in a previous sequence
            
            int j = i;
            sum = 0;
            
            // Traverse every k-th element starting from index i
            while (j < n) {
                vis[j] = 1;             // Mark index as visited
                sum += energy[j];       // Add current energy value
                sum = Math.max(sum, energy[j]); // Restart subarray if beneficial (Kadane’s idea)
                j += k;                 // Move to the next element in the sequence
            }
            
            ans = Math.max(ans, sum);   // Update global maximum
        }
        
        return ans;  // Return the maximum possible energy sum
    }
}

//Approach-1 (Brute-force on frequencies)
//T.C : O(n + m²)  -> where m is the number of distinct characters in the string word.
//S.C : O(m) 

class Solution {
    public int minimumDeletions(String word, int k) {
        int n = word.length();

        // Step 1: Count frequency of each character
        Map<Character, Integer> mp = new HashMap<>();
        for (int i = 0; i < n; i++) {
            char c = word.charAt(i);
            mp.put(c, mp.getOrDefault(c, 0) + 1);
        }

        // Step 2: Extract frequencies into a list
        List<Integer> li = new ArrayList<>();
        for (Map.Entry<Character, Integer> entry : mp.entrySet()) {
            li.add(entry.getValue());
        }

        // Step 3: Sort the frequencies to make comparison easier
        Collections.sort(li);

        int ans = Integer.MAX_VALUE;

        // Step 4: Try each frequency as a base frequency
        for (int i = 0; i < li.size(); i++) {
            int x = li.get(i); // base frequency
            int del = 0;

            // Step 5: For every other frequency, calculate deletions
            for (int j = 0; j < li.size(); j++) {
                if (i == j) continue; // skip the base itself

                int curr = li.get(j);

                // Case 1: If curr is already in range [x, x + k], no deletion needed
                if (curr >= x && curr <= x + k) continue;

                // Case 2: If curr > x + k → delete excess characters
                if (curr > x + k) {
                    del += curr - (x + k);
                }

                // Case 3: If curr < x → delete all characters of that frequency
                else if (curr < x) {
                    del += curr;
                }
            }

            // Step 6: Update minimum deletions
            ans = Math.min(ans, del);
        }

        // Step 7: Return the minimal deletions needed
        return ans;
    }
}

//Approach-2 (Brute-Force Frequency Normalization (No Sorting))
//T.C : O(n)
//S.C : O(1)

class Solution {
    public int minimumDeletions(String word, int k) {
        int n = word.length();

        int[] freq = new int[26];  // Step 1: Array to store frequency of each lowercase letter

        // Step 2: Count frequency of each character in the input string
        for (char ch : word.toCharArray()) {
            freq[ch - 'a']++;
        }

        int result = n;  // Step 3: Initialize result with max deletions (i.e., delete all characters)

        // Step 4: Try each non-zero frequency as the "base" frequency
        for (int i = 0; i < 26; i++) {
            if (freq[i] == 0) continue; // Skip characters not present in the word

            int del = 0;  // Tracks deletions for this base frequency

            // Step 5: Compare every other character's frequency with base freq[i]
            for (int j = 0; j < 26; j++) {
                if (i == j || freq[j] == 0) continue; // Skip self or unused characters

                if (freq[j] > freq[i] + k) {
                    // Case 1: Frequency too high → reduce it to base + k
                    del += freq[j] - (freq[i] + k);
                } else if (freq[j] < freq[i]) {
                    // Case 2: Frequency too low → delete all characters of that frequency
                    del += freq[j];
                }
                // Case 3: freq[j] ∈ [freq[i], freq[i] + k] → no deletion needed
            }

            // Step 6: Track the minimum deletions across all base frequencies
            result = Math.min(result, del);
        }

        // Step 7: Return the minimal deletions required
        return result;
    }
}


//Approach-3 (Straight forward)
//T.C : O(n)
//S.C : O(1)

class Solution {
    public int minimumDeletions(String word, int k) {
        int n = word.length();
        int[] freq = new int[26];  // Frequency array for all lowercase letters

        // Step 1: Count frequency of each character
        for (char ch : word.toCharArray()) {
            freq[ch - 'a']++;
        }

        // Step 2: Sort frequencies in ascending order
        Arrays.sort(freq);

        int result = n;         // Initialize result with max possible deletions (delete all)
        int cumDelete = 0;      // Cumulative deletions from lower frequencies

        // Step 3: Try each non-zero frequency as a base
        for (int i = 0; i < 26; i++) {
            int del = cumDelete;        // Start with deletions done so far for smaller frequencies
            int freq_i = freq[i];       // Use freq[i] as the base frequency

            // Step 4: For higher frequencies, check if they need reduction
            for (int j = 25; j > i; j--) {
                if (freq[j] - freq_i <= k) break;  // Already within [base, base+k], no deletion
                del += freq[j] - (freq_i + k);     // Delete the excess to bring within range
            }

            // Step 5: Update minimum deletions
            result = Math.min(result, del);

            // Step 6: Add current base freq to cumulative deletions for next iterations
            cumDelete += freq_i;
        }

        return result;  // Return the minimum number of deletions found
    }
}

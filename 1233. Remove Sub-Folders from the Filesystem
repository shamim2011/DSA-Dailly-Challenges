//Approach-1 (Using set and substring find)
//T.C : O(n*L^2)
//S.C : O(n) //You can consider the length of each character as well - O(n*L)

class Solution {
    public List<String> removeSubfolders(String[] folder) {
        // Store all folder paths in a set for quick lookup
        Set<String> st = new HashSet<>();
        for (String fold : folder) {
            st.add(fold);
        }
        List<String> res = new ArrayList<>();
        // Iterate over each folder
        for (String currFolder : folder) {
            boolean subfolder = false; // Flag to check if it's a subfolder
            String tempFolder = currFolder; // Store the original folder path
            // Keep removing the last part of the folder until we find a parent
            while (!currFolder.isEmpty()) {
                int position = currFolder.lastIndexOf('/'); // Find the last '/' position
                currFolder = currFolder.substring(0, position); // Remove the last part
                // If the shortened path exists in the set, it's a parent folder
                if (st.contains(currFolder)) {
                    subfolder = true; // Mark as subfolder
                    break;
                }
            }
            // If not a subfolder, add to result
            if (!subfolder) {
                res.add(tempFolder);
            }
        }
        return res; // Return list of top-level folders only
    }
}


//Approach-2 (Using Sorting)
//T.C : O(n*logn) //You can consider the length of each character as well - O(n*L*logn)
//S.C : O(n)

class Solution {
    public List<String> removeSubfolders(String[] folder) {
        // Sort the folder array lexicographically
        // This ensures that parent folders come before their subfolders
        Arrays.sort(folder);

        List<String> res = new ArrayList<>();

        // The first folder in the sorted list cannot be a subfolder
        res.add(folder[0]);

        // Iterate from the second folder onward
        for (int i = 1; i < folder.length; i++) {
            String currFolder = folder[i];                  // Current folder being checked
            String lastFolder = res.get(res.size() - 1);    // Most recently added folder in result
            lastFolder += "/";                              // Append '/' to ensure strict prefix match

            // Check if current folder starts with the last added folder (i.e., it's a subfolder)
            if (!currFolder.startsWith(lastFolder)) {
                // Not a subfolder, so add it to the result
                res.add(currFolder);
            }
        }

        // Return the list of folders excluding subfolders
        return res;
    }
}

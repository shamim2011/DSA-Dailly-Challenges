//Approach-1 (Brute force)
//T.C : O(n)
//S.C : O(1)

class Solution {
    public int minOperations(int[] nums) {
        int res=0;
        int n=nums.length;
        int i=0;
        while(i<=n-3){
            if(nums[i]==0){
                res++;
                for(int j=i;j<i+3;j++){
                    // here 0 -> 1, 1 -> 0
                    nums[j] ^=1;
                }
                i++;
            }
            else{
                i++;
            }
        }
        // if in the nums array any element is o then return -1;
        for(int num:nums){
            if(num==0){
                return -1;
            }
        } 
        return res;
    }
}


//Approach-1 (Using auxiliary array to mark Flipped indices)
//T.C : O(n)
//S.C : O(n)

class Solution {
    public int minOperations(int[] nums) {
        int n = nums.length;

        int flips = 0;
        boolean[] isFlipped = new boolean[n];
        int flipCountFromPastForCurri = 0;
        for (int i = 0; i < n; i++) {
            if (i >= 3 && isFlipped[i - 3]) {
                flipCountFromPastForCurri--;
            }
            if (flipCountFromPastForCurri % 2 == nums[i]) {
                if (i + 3 > n) {
                    return -1;
                }
                flipCountFromPastForCurri++;
                isFlipped[i] = true;
                flips++;
            }
        }
        return flips;
    }
}

//Approach-1 (Brute Force - Recursion + Memoization)
//T.C : O(n*k)
//S.C : O(n*k)

class Solution {
    int n;
    int solve(int[] nums,int idx,int k,int[][] d){
        if(k==0){
            return 0; // no more house requre to stolen
        }
        if(idx >= n){    //invalid path
            return Integer.MAX_VALUE;
        }
        if(d[idx][k] != -1){
            return d[idx][k];
        }
        int take=Math.max(nums[idx],solve(nums,idx+2,k-1,d));
        int not_take=solve(nums,idx+1,k,d);

        return d[idx][k] = Math.min(take,not_take);
    }
    public int minCapability(int[] nums, int k) {
        n=nums.length;
        int[][] d=new int[n+1][k+1];
        for(int[] row : d){
            Arrays.fill(row,-1);
        }
        return solve(nums,0,k,d);   // array-nums,index-0,cover-k
    }
}

//Approach-2 (Binary Search on Answer "Minimize the Maximum Robbed Amount(capability)")
//T.C : O(n*log(maxC))
//S.C : O(1)
class Solution {
    boolean isPossible(int[] nums,int mid,int k){
        int house=0;
        for(int i=0;i<nums.length;i++){
            if(nums[i] <= mid){
                house++;
                i++; // Skipping the adjacent house
            }
        }
        return house >= k;  // we manage to rob atleast k house
    }
    public int minCapability(int[] nums, int k) {
        int n=nums.length;
        // int l = Arrays.stream(nums).min().getAsInt();
        // int r = Arrays.stream(nums).max().getAsInt();
        // Same code of the above 4 & 5 lines
        int l=nums[0];
        int r=nums[0];
        for(int i=1;i<n;i++){
            if(nums[i]<l){
                l=nums[i];
            }
            if(nums[i]>r){
                r=nums[i];
            }
        }
        int result=r;
        // Binary search
        while(l<=r){  // T.C = O(nlog(maxC))
            int mid=l+(r-l)/2;  // Capability
            if(isPossible(nums,mid,k)){
                result=mid;
                r=mid-1;
            }
            else{
                l=mid+1;
            }
        }
        return result;
    }
}

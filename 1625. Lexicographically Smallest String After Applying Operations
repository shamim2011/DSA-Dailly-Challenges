//Approach-1 (Using BFS)
//T.C : O(n^2)
//S.C : O(n^2)


class Solution {

    // Helper method to rotate a string to the right by 'b' positions
    String rotate(String s, int b) {
        StringBuilder sb = new StringBuilder(s);
        sb.reverse();  // Step 1: Reverse the entire string
        reverseRange(sb, 0, b - 1);  // Step 2: Reverse the first 'b' characters
        reverseRange(sb, b, sb.length() - 1);  // Step 3: Reverse the remaining part
        return sb.toString();  // Return the rotated string
    }

    // Helper method to reverse a specific range [left, right] in StringBuilder
    void reverseRange(StringBuilder sb, int left, int right) {
        while (left < right) {
            char temp = sb.charAt(left);
            sb.setCharAt(left, sb.charAt(right));
            sb.setCharAt(right, temp);
            left++;
            right--;
        }
    }

    // Main method to find the lexicographically smallest string possible
    public String findLexSmallestString(String s, int a, int b) {
        Set<String> visited = new HashSet<>(); // To avoid revisiting the same string
        Queue<String> que = new LinkedList<>(); // Queue for BFS traversal
        String smallStr = s; // Initialize smallest string as the original input

        que.add(s);
        visited.add(s);

        // Perform BFS to explore all possible strings generated by operations
        while (!que.isEmpty()) {
            String curr = que.poll();

            // Update smallest string if a smaller one is found
            if (curr.compareTo(smallStr) < 0) {
                smallStr = curr;
            }

            // --- Operation 1: Add 'a' to digits at odd indices ---
            char[] added = curr.toCharArray();
            for (int i = 1; i < added.length; i += 2) {
                int newDigit = ((added[i] - '0') + a) % 10;  // Add 'a' mod 10
                added[i] = (char) (newDigit + '0');  // Convert back to char
            }
            String addStr = new String(added);
            if (visited.add(addStr)) {  // If new string not visited, enqueue it
                que.add(addStr);
            }

            // --- Operation 2: Rotate the string to the right by 'b' positions ---
            String rotated = rotate(curr, b);
            if (visited.add(rotated)) {  // If new string not visited, enqueue it
                que.add(rotated);
            }
        }

        return smallStr; // Return the lexicographically smallest string found
    }
}

//Approach-2 (Using DFS)
//T.C : O(n^2)
//S.C : O(n^2)


class Solution {

    // Helper function to rotate a string (in StringBuilder form) to the right by 'b' positions
    void rotate(StringBuilder s, int b) {
        int n = s.length();
        b %= n; // Handle case when b > n

        // Reverse the entire string
        reverse(s, 0, n - 1);
        // Reverse the first 'b' characters
        reverse(s, 0, b - 1);
        // Reverse the remaining part
        reverse(s, b, n - 1);
    }

    // Helper function to reverse characters in StringBuilder between indices [l, r]
    void reverse(StringBuilder s, int l, int r) {
        while (l < r) {
            char temp = s.charAt(l);
            s.setCharAt(l, s.charAt(r));
            s.setCharAt(r, temp);
            l++;
            r--;
        }
    }

    // Depth-First Search function to explore all possible strings
    void dfs(StringBuilder curr, int a, int b, Set<String> visited, StringBuilder smallest) {
        String str = curr.toString(); // Convert current StringBuilder to string

        // If this string was already visited, skip it to prevent infinite recursion
        if (visited.contains(str)) return;

        // Mark the current string as visited
        visited.add(str);

        // Update the smallest string if a smaller lexicographic string is found
        if (str.compareTo(smallest.toString()) < 0)
            smallest.replace(0, smallest.length(), str);

        // --- Operation 1: Add 'a' to digits at all odd indices ---
        StringBuilder added = new StringBuilder(str);
        for (int i = 1; i < added.length(); i += 2) {
            int newDigit = (added.charAt(i) - '0' + a) % 10;  // Add 'a' (mod 10)
            added.setCharAt(i, (char) (newDigit + '0'));      // Convert back to character
        }
        dfs(added, a, b, visited, smallest); // Recurse with the modified string

        // --- Operation 2: Rotate the string to the right by 'b' positions ---
        StringBuilder rotated = new StringBuilder(str);
        rotate(rotated, b);
        dfs(rotated, a, b, visited, smallest); // Recurse with the rotated string
    }

    // Main function to find the lexicographically smallest string
    public String findLexSmallestString(String s, int a, int b) {
        Set<String> visited = new HashSet<>();     // Keeps track of all visited strings
        StringBuilder smallest = new StringBuilder(s); // Initialize smallest as the original string
        dfs(new StringBuilder(s), a, b, visited, smallest); // Start DFS traversal
        return smallest.toString(); // Return the smallest string found
    }
}

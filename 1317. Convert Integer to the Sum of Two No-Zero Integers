// Approach 1- Brute Force with String Conversion
// T.C - O(n · log n)
// S.C - O(n · log n)

class Solution {
    public int[] getNoZeroIntegers(int n) {
        // Result array to store two numbers
        int[] ans = new int[2];
        int j = 0;   // Index for storing values in ans[]
        int num = 1; // Start with 1 (since 0 is not allowed)

        // Keep searching until we find a valid pair
        while (num > 0) {
            // Subtract num from n to get the other number
            int sub = n - num;

            /*
             * Check conditions:
             * 1. sub % 10 != 0 → quick check: sub should not end with 0
             * 2. (Integer.toString(sub)).contains("0") → sub should not contain any 0
             * 3. (Integer.toString(num)).contains("0") → num should not contain any 0
             */
            if (sub % 10 != 0 && !(Integer.toString(sub)).contains("0") && !(Integer.toString(num)).contains("0")) {
                ans[j++] = num; // Store num in result
                ans[j++] = sub; // Store sub in result
                break;          // Pair found → exit loop
            }

            // Try next number
            num++;
        }

        return ans; // Return the valid pair
    }
}


// Approach 2- Math-Based Approach
// T.C - O(n · log n)
// S.C - O(1)

class Solution {
    public int[] getNoZeroIntegers(int n) {
        // Array to store the result (two integers)
        int[] ans = new int[2];
        
        // Start checking from 1 (since 0 is not allowed)
        int num = 1;

        // Iterate until we find a valid pair
        while (num < n) {
            int sub = n - num; // Second number

            // Check: both numbers should NOT contain digit '0'
            if (!hasZero(num) && !hasZero(sub)) {
                ans[0] = num; // store first number
                ans[1] = sub; // store second number
                break;        // pair found, exit loop
            }

            // Try next number
            num++;
        }

        // Return the valid pair
        return ans;
    }

    // Helper method to check if a number contains digit '0'
    public boolean hasZero(int x) {
        while (x > 0) {
            if (x % 10 == 0) return true; // found a '0' digit
            x /= 10; // remove last digit
        }
        return false; // no zero found
    }
}

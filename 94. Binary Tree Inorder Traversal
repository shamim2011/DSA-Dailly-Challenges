// T.C - O(n)
// S.C - O(n)
Given the root of a binary tree, return the inorder traversal of its nodes' values.
xample 1:

Input: root = [1,null,2,3]

Output: [1,3,2]

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        Stack<TreeNode> st=new Stack<>();
        List<Integer> inorder=new ArrayList<>();
        TreeNode node=root;
        while(true){
            if(node !=null){
                st.push(node);
                node=node.left;
            }
            else{
                if(st.isEmpty()){
                    break;
                }
                node=st.pop();
                inorder.add(node.val);
                node=node.right;
            }
        }
        return inorder;
    }
}

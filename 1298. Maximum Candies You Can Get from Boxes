//Approach-1 (Using DFS)
//T.C : O(n), where n =  number of boxes, we don't visit any box more than once
//S.C : O(n)

class Solution {

    // Helper DFS function to collect candies recursively
    int dfs(int box, int[] status, int[] candies, int[][] keys, int[][] containedBoxes,
            Set<Integer> visited, Set<Integer> foundBoxes) {

        // If we have already visited this box, skip it to avoid duplicate processing
        if (visited.contains(box)) {
            return 0;
        }

        // If we found this box but it is locked, store it for later and return 0
        if (status[box] == 0) {
            foundBoxes.add(box);
            return 0;
        }

        // Mark the box as visited
        visited.add(box);

        // Start by collecting candies in this box
        int candiesCollected = candies[box];

        // Explore all boxes contained within the current box
        for (int innerBox : containedBoxes[box]) {
            candiesCollected += dfs(innerBox, status, candies, keys, containedBoxes, visited, foundBoxes);
        }

        // Use all the keys found in this box to unlock other boxes
        for (int boxKey : keys[box]) {
            status[boxKey] = 1; // Mark the box as unlocked

            // If we had found this box earlier and it's now unlocked, process it
            if (foundBoxes.contains(boxKey)) {
                candiesCollected += dfs(boxKey, status, candies, keys, containedBoxes, visited, foundBoxes);
            }
        }

        return candiesCollected;
    }

    // Main method to calculate the maximum candies we can collect
    public int maxCandies(int[] status, int[] candies, int[][] keys, int[][] containedBoxes, int[] initialBoxes) {
        int totalCandies = 0;

        // To keep track of already visited (opened) boxes
        Set<Integer> visited = new HashSet<>();

        // To keep track of boxes that are found but not yet opened (locked)
        Set<Integer> foundBoxes = new HashSet<>();

        // Try to process each initial box
        for (int box : initialBoxes) {
            totalCandies += dfs(box, status, candies, keys, containedBoxes, visited, foundBoxes);
        }

        return totalCandies;
    }
}


//Approach-2 (Using BFS)
//T.C : O(n), where n =  number of boxes, we don't visit any box more than once
//S.C : O(n)


class Solution {
    public int maxCandies(int[] status, int[] candies, int[][] keys, int[][] containedBoxes, int[] initialBoxes) {
        int totalCandies = 0;

        // Set to track boxes that have already been visited (opened)
        Set<Integer> visited = new HashSet<>();

        // Set to track boxes that are found (may be locked or unlocked)
        Set<Integer> foundBoxes = new HashSet<>();

        // Queue for BFS processing of boxes that are unlocked and can be opened
        Queue<Integer> que = new LinkedList<>();

        // Process the initial boxes
        for (int box : initialBoxes) {
            foundBoxes.add(box); // Mark the box as found

            // If the box is already unlocked (status == 1), process it immediately
            if (status[box] == 1) {
                que.offer(box);               // Add it to the queue for BFS
                visited.add(box);            // Mark as visited
                totalCandies += candies[box]; // Collect candies from this box
            }
        }

        // Begin BFS traversal
        while (!que.isEmpty()) {
            int box = que.poll(); // Get the next box to process

            // Process all boxes contained in the current box
            for (int innerBox : containedBoxes[box]) {
                foundBoxes.add(innerBox); // Mark as found

                // If the inner box is unlocked and not yet visited, process it
                if (status[innerBox] == 1 && !visited.contains(innerBox)) {
                    que.offer(innerBox);                // Add to the queue
                    visited.add(innerBox);              // Mark as visited
                    totalCandies += candies[innerBox];  // Collect candies
                }
            }

            // Use all keys found in the current box
            for (int boxKey : keys[box]) {
                status[boxKey] = 1; // Unlock the corresponding box

                // If the box was found earlier and not yet visited, process it
                if (foundBoxes.contains(boxKey) && !visited.contains(boxKey)) {
                    que.offer(boxKey);                // Add to the queue
                    visited.add(boxKey);              // Mark as visited
                    totalCandies += candies[boxKey];  // Collect candies
                }
            }
        }

        // Return the total number of candies collected
        return totalCandies;
    }
}

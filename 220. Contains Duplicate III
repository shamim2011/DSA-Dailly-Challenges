Approach - 1(Simple Brute Force) TLE
// T . C - O(n^2)
// S.C - O(1)

class Solution {
    public boolean containsNearbyAlmostDuplicate(int[] nums, int indexDiff, int valueDiff) {
        int n = nums.length;
        for(int i=0;i<n;i++){
            for(int j=i+1;j<n;j++){
                if(Math.abs(nums[i]-nums[j])<=valueDiff && Math.abs(i-j)<=indexDiff){
                    return true;
                }
            }
        }
        return false;
    }
}

------------------------------same code of above code-----------------------
class Solution {
    public boolean containsNearbyAlmostDuplicate(int[] nums, int indexDiff, int valueDiff) {
        int n=nums.length;
        int i=0,j=1;
        while(i<n-1){
            while(i<j && j<n){
                if(Math.abs(nums[i]-nums[j])<=valueDiff && Math.abs(i-j)<=indexDiff){
                    return true;
                }
                j++;
            }
            i++;
            j = i + 1;
        }
        return false;
    }
}

Approach - 2(TreeSet)
// T . C - O(n)
// S.C - O(n)




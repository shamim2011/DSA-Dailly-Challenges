// Approach - Segment Tree (Range Sum Query + Point Update)
// T.C - O(logn)
// S.C - O(n)

class NumArray {
    int n;
    int[] segTree;
    void buildSegTree(int i,int l,int r,int[] nums){
        if(l==r){
            segTree[i] = nums[l];
            return;
        }
        int mid = l+(r-l)/2;
        buildSegTree(2*i+1,l,mid,nums);
        buildSegTree(2*i+2,mid+1,r,nums);
        segTree[i] = segTree[2*i+1]+segTree[2*i+2];

    }
    void updateSegTree(int index,int val,int i,int l,int r){
        if(l==r){
           segTree[i] = val;
           return; 
        }
        int mid = l+(r-l)/2;
        if(index<=mid){
            updateSegTree(index,val,2*i+1,l,mid);
        }else{
            updateSegTree(index,val,2*i+2,mid+1,r);
        }
        segTree[i] = segTree[2*i+1]+segTree[2*i+2];

    }
    int querySegTree(int start,int end,int i,int l,int r){
        if(r<start || l>end){
            return 0;
        }
        if(start<=l && end>=r){
            return segTree[i];
        }
        int mid = l+(r-l)/2;
        return querySegTree(start,end,2*i+1,l,mid) + querySegTree(start,end,2*i+2,mid+1,r);
    }
    public NumArray(int[] nums) {
        n = nums.length;
        segTree = new int[4*n];
        buildSegTree(0,0,n-1,nums);
    }
    
    public void update(int index, int val) {
        updateSegTree(index,val,0,0,n-1);
    }
    
    public int sumRange(int start, int end) {
        return querySegTree(start,end,0,0,n-1);
    }
}

//     rangeUpdate(){
//         lazy Propagation
//     }
// }


/**
 * Your NumArray object will be instantiated and called as such:
 * NumArray obj = new NumArray(nums);
 * obj.update(index,val);
 * int param_2 = obj.sumRange(left,right);
 */


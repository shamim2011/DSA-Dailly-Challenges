//Approach-1 (Brute Force)
//T.C : O(n^3)
//S.C : O(1)

class Solution {
    public int numOfSubarrays(int[] arr) {
        int odd_sum_count=0;
        int n=arr.length;
        for(int i=0;i<n;i++){
            for(int j=i;j<n;j++){
                int sum=0;
                for(int k=i;k<=j;k++){
                    sum+=arr[k];
                }
                if(sum%2!=0){
                    odd_sum_count++;
                }
            } 
        }
        return odd_sum_count;
    }
}


//Approach-2 (Better Brute Force)
//T.C : O(n^2)
//S.C : O(1)
class Solution {
    public int numOfSubarrays(int[] arr) {
        int odd_sum_count=0;
        int n=arr.length;
        for(int i=0;i<n;i++){
            int sum=0;
            for(int j=i;j<n;j++){
                sum+=arr[j];
                if(sum%2!=0){
                    odd_sum_count++;
                }
            } 
        }
        return odd_sum_count;
    }
}


//Approach-3 (Optimal using prefix-sum array)
//T.C : O(n)
//S.C : O(n)

class Solution {
    int M= (int) 1e9 +7;
    public int numOfSubarrays(int[] arr) {
        int odd=0;
        int even=1;
        int n=arr.length;
        int[] prefixSum=new int[n];
        prefixSum[0]=arr[0];
        for(int i=1;i<n;i++){
            prefixSum[i]=prefixSum[i-1]+arr[i];
        }
        int count=0;
        for(int i=0;i<n;i++){
            if(prefixSum[i]%2==0){  // odd + even = odd
                count=(count+odd)%M;
                even++;
            }
            else{   // even + odd = odd
                count=(count+even)%M;
                odd++;
            }
        }
        return count;
    }
}

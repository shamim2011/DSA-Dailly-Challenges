//Given a collection of numbers, nums, that might contain duplicates,
//return all possible unique permutations in any order.

//Input: nums = [1,1,2]
//Output:
[[1,1,2],
 [1,2,1],
 [2,1,1]]

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]

class Solution {
    List<List<Integer>> result=new ArrayList<>();
    int n;
    public List<List<Integer>> permuteUnique(int[] nums) {
        // Arrays.sort(nums);
        n=nums.length;
        solve(0,nums);
        return result;
    }
    public void solve(int idx,int[] nums){
        if(idx==n){
            List<Integer> currentPermutation = new ArrayList<>();
            for (int num : nums) {
                currentPermutation.add(num);
            }
            result.add(currentPermutation);
            return;
        }
        HashSet<Integer> used = new HashSet<>();
        for(int i=idx;i<n;i++){
            if (used.contains(nums[i])) continue;  // Skip duplicate swaps
            used.add(nums[i]);
            // Do
            swap(nums,i,idx);
            // Explore
            solve(idx+1,nums);
            // Undo
            swap(nums,i,idx);
        }
    }
    public void swap(int[] nums, int i,int j){
        int temp=nums[i];
        nums[i]=nums[j];
        nums[j]=temp;
    }
}

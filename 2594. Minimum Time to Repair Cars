//Approach (Binary Search on Answer)
//T.C : O(n * log(maxRank * cars * cars))
//S.C : O(1)

class Solution {
    boolean isPossible(int[] ranks,long mid,int cars){
        long carsFixed=0;
        // finding cars repair for each mechanics (time=ranks[i] * cars^2)
        for(int i=0;i<ranks.length;i++){
            carsFixed+=Math.sqrt(mid/ranks[i]);
        }
        return carsFixed>=cars;
    }
    public long repairCars(int[] ranks, int cars) {
        int n=ranks.length;

        long maxR=Long.MIN_VALUE;
        for(int i=0;i<n;i++){
            if(ranks[i]>maxR){
                maxR=ranks[i];
            }
        }
        // Use binary search
        long l=1;
        // Instead of 12-17 line for finding maxR
        // cars^2 * Arrays.stream(ranks).max().orElse(Integer.MIN_VALUE);
        long r=1L * cars * cars * maxR;  
        long result=Long.MIN_VALUE;
        while(l<=r){
            long mid=l+(r-l)/2;
            if(isPossible(ranks,mid,cars)){
                result=mid;
                r=mid-1;
            }
            else{
                l=mid+1;
            }
        }
        return result;
    }
}


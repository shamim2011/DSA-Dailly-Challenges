// Approach - Brute Force method
// T.C - O(n*n)
// S.C - O(1)

class Solution {
    public int maximumDifference(int[] nums) {
        int diff = -1;
        int n = nums.length;
        for(int i=0;i<n-1;i++){
            for(int j=i+1;j<n;j++){
                if(nums[j]>nums[i]){
                    diff = Math.max(diff,nums[j]-nums[i]);
                }
            }
        }
        return diff;
    }
}

// Approach - Optimal
// T.C - O(n)
// S.C - O(1)

class Solution {
    public int maximumDifference(int[] nums) {
        int min = nums[0], maxDiff = -1;
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] > min) {
                maxDiff = Math.max(maxDiff, nums[i] - min);
            } else {
                min = nums[i];
            }
        }
        return maxDiff;
    }
}

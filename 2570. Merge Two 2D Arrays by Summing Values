// Approach-1 (Using HashMap + Sorting)
// T.C : O(m+n + NlogN), N = m+n, m = nums1.length, n = nums2.length
// S.C : O(m+n)

class Solution {
    public int[][] mergeArrays(int[][] nums1, int[][] nums2) {
        int n=nums1.length;
        int m=nums2.length;
        Map<Integer,Integer> mp=new HashMap<>();
        List<int[]> result=new ArrayList<>();
        for(int i=0;i<n;i++){
            int id=nums1[i][0];
            int val=nums1[i][1];
            mp.put(id,mp.getOrDefault(id,0)+val);
        }
        for(int i=0;i<m;i++){
            int id=nums2[i][0];
            int val=nums2[i][1];
            mp.put(id,mp.getOrDefault(id,0)+val);
        }
        for(Map.Entry<Integer,Integer> entry:mp.entrySet()){
            result.add(new int[]{entry.getKey(),entry.getValue()});
        }
        result.sort(Comparator.comparingInt(a ->a[0]));
        return result.toArray(new int[0][]);
    }
}


// Approach-2 (Using TreeMap)
// T.C : O(m+n + NlogN), insertion in TreeMap is logarithmic time complexity
// S.C : O(m+n)
class Solution {
    public int[][] mergeArrays(int[][] nums1, int[][] nums2) {
        int n=nums1.length;
        int m=nums2.length;
        TreeMap<Integer,Integer> mp=new TreeMap<>();
        List<int[]> result=new ArrayList<>();
        for(int i=0;i<n;i++){
            int id=nums1[i][0];
            int val=nums1[i][1];
            mp.put(id,mp.getOrDefault(id,0)+val);
        }
        for(int i=0;i<m;i++){
            int id=nums2[i][0];
            int val=nums2[i][1];
            mp.put(id,mp.getOrDefault(id,0)+val);
        }
        for(Map.Entry<Integer,Integer> entry:mp.entrySet()){
            result.add(new int[]{entry.getKey(),entry.getValue()});
        }
        
        return result.toArray(new int[0][]);
    }
}

// Approach-3 (Using Two Pointers)
// T.C : O(m+n)
// S.C : O(1) 
class Solution {
    public int[][] mergeArrays(int[][] nums1, int[][] nums2) {
        int n=nums1.length;
        int m=nums2.length;
        int i=0,j=0;
        List<int[]>result=new ArrayList<>();
        while(i<n && j<m){
            if(nums1[i][0]<nums2[j][0]){
                result.add(nums1[i]);
                i++;
            }
            else if(nums1[i][0]>nums2[j][0]){
                result.add(nums2[j]);
                j++;
            }
            else{
                result.add(new int[]{nums1[i][0],nums1[i][1]+nums2[j][1]});
                i++;j++;
            }
        }
        while(i<n){
            result.add(nums1[i]);
            i++;
        }
        while(j<m){
            result.add(nums2[j]);
            j++;
        }
        return result.toArray(new int[0][]);
    }
}

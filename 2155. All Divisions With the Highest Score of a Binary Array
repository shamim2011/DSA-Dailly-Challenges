// Approach-1 (Using 2 Pass Solution and LCA code)
// T.C : O(2*n) ~= O(n)
// S.C : O(maxDepth) System stack space

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    HashMap<Integer, Integer> mp = new HashMap<>();

    // Variable to store maximum depth found in the tree
    int maxD = 0;

    // Function to find the Lowest Common Ancestor (LCA) of deepest leaves
    TreeNode LCA(TreeNode root) {
        // Base case: if node is null or it is one of the deepest nodes
        if (root == null || mp.getOrDefault(root.val, -1) == maxD) {
            return root;
        }

        // Recursively find LCA in left and right subtrees
        TreeNode left = LCA(root.left);
        TreeNode right = LCA(root.right);

        // If both left and right return non-null, current node is LCA
        if (left != null && right != null) {
            return root;
        }

        // If only left is non-null, propagate it upward
        if (left != null) {
            return left;
        }

        // Else return right (could be non-null or null)
        return right;
    }

    // Main function to return the LCA of the deepest leaves
    public TreeNode lcaDeepestLeaves(TreeNode root) {
        // First, compute the depth of every node
        depth(root, 0);

        // Then, find LCA of the nodes at the deepest level
        return LCA(root);
    }

    // Helper function to compute depth of each node recursively
    void depth(TreeNode root, int d) {
        if (root == null) return;

        // Update the maximum depth found so far
        maxD = Math.max(maxD, d);

        // Store the depth of current node in the map
        mp.put(root.val, d);

        // Recurse for left and right children with depth + 1
        depth(root.left, d + 1);
        depth(root.right, d + 1);
    }
}


// Approach-2 (Using 1 Pass Solution)
// T.C : O(n)
// S.C : O(maxDepth) System stack space

class Solution {
    class Result {
        int depth;
        TreeNode node;

        Result(int depth, TreeNode node) {
            this.depth = depth;
            this.node = node;
        }
    }

    // Recursive function to solve the problem
    private Result solve(TreeNode root) {
        if (root == null) {
            return new Result(0, null); // base case
        }

        Result left = solve(root.left);   // solve for left subtree
        Result right = solve(root.right); // solve for right subtree

        // If both subtrees have the same depth, root is the LCA
        if (left.depth == right.depth) {
            return new Result(left.depth + 1, root);
        }
        // If left is deeper, return left's LCA
        else if (left.depth > right.depth) {
            return new Result(left.depth + 1, left.node);
        }
        // If right is deeper, return right's LCA
        else {
            return new Result(right.depth + 1, right.node);
        }
    }

    // Main function that returns the LCA of deepest leaves
    public TreeNode lcaDeepestLeaves(TreeNode root) {
        return solve(root).node;
    }
}

// Approach 1: Binary Search + DFS
// T.C: O(N^2 * log(MaxHeight)) 
//   S.C: O(N^2)

class Solution {
    // Directions for moving up, down, left, right
    int[][] direction = {{1,0},{-1,0},{0,1},{0,-1}};
    
    // Visited array to mark the cells already explored
    boolean[][] visited;
    
    // Grid size
    int n;

    public int swimInWater(int[][] grid) {
        n = grid.length;  // size of the grid
        
        // Binary search range: from initial cell height to maximum possible height
        int l = grid[0][0];     // minimum time needed to start from (0,0)
        int r = n * n - 1;      // maximum possible height value in the grid
        int result = 0;         // stores the minimum time needed to reach (n-1,n-1)

        // Binary search on the answer (minimum possible time)
        while (l <= r) {
            int mid = l + (r - l) / 2;   // mid represents the current allowed time (water level)
            
            // Reset visited for each DFS attempt
            visited = new boolean[n][n];

            // If itâ€™s possible to reach the destination with current water level = mid
            if (possibleToReach(grid, 0, 0, mid)) {
                result = mid;   // store this as a possible answer
                r = mid - 1;    // try for a smaller time (check left half)
            } else {
                l = mid + 1;    // increase water level (check right half)
            }
        }
        return result;
    }

    // DFS to check if we can reach (n-1,n-1) with current water level = mid
    boolean possibleToReach(int[][] grid, int i, int j, int mid) {
        // Boundary checks and constraints
        if (i < 0 || i >= n || j < 0 || j >= n || visited[i][j] || grid[i][j] > mid) {
            return false;   // invalid cell or not reachable under current water level
        }

        // Mark cell as visited
        visited[i][j] = true;

        // If we reached the destination cell, return true
        if (i == n - 1 && j == n - 1) {
            return true;
        }

        // Explore all 4 directions
        for (int[] dir : direction) {
            int i_ = i + dir[0];
            int j_ = j + dir[1];

            // Recursively try to reach destination
            if (possibleToReach(grid, i_, j_, mid)) {
                return true;
            }
        }

        // If no path found, return false
        return false;
    }
}

// Approach 1: Binary Search + DFS
// T.C: O(N^2 * log(MaxHeight)) 
//   S.C: O(N^2)

class Solution {
    // Directions for moving up, down, left, right
    int[][] direction = {{1,0},{-1,0},{0,1},{0,-1}};
    
    // Visited array to mark the cells already explored
    boolean[][] visited;
    
    // Grid size
    int n;

    public int swimInWater(int[][] grid) {
        n = grid.length;  // size of the grid
        
        // Binary search range: from initial cell height to maximum possible height
        int l = grid[0][0];     // minimum time needed to start from (0,0)
        int r = n * n - 1;      // maximum possible height value in the grid
        int result = 0;         // stores the minimum time needed to reach (n-1,n-1)

        // Binary search on the answer (minimum possible time)
        while (l <= r) {
            int mid = l + (r - l) / 2;   // mid represents the current allowed time (water level)
            
            // Reset visited for each DFS attempt
            visited = new boolean[n][n];

            // If it’s possible to reach the destination with current water level = mid
            if (possibleToReach(grid, 0, 0, mid)) {
                result = mid;   // store this as a possible answer
                r = mid - 1;    // try for a smaller time (check left half)
            } else {
                l = mid + 1;    // increase water level (check right half)
            }
        }
        return result;
    }

    // DFS to check if we can reach (n-1,n-1) with current water level = mid
    boolean possibleToReach(int[][] grid, int i, int j, int mid) {
        // Boundary checks and constraints
        if (i < 0 || i >= n || j < 0 || j >= n || visited[i][j] || grid[i][j] > mid) {
            return false;   // invalid cell or not reachable under current water level
        }

        // Mark cell as visited
        visited[i][j] = true;

        // If we reached the destination cell, return true
        if (i == n - 1 && j == n - 1) {
            return true;
        }

        // Explore all 4 directions
        for (int[] dir : direction) {
            int i_ = i + dir[0];
            int j_ = j + dir[1];

            // Recursively try to reach destination
            if (possibleToReach(grid, i_, j_, mid)) {
                return true;
            }
        }

        // If no path found, return false
        return false;
    }
}



//Approach-2 Dijkstra's Algo (PriorityQueue) Time : O(n^2 * log(n))
//Single Source, Single Destination — find the shortest path to reach n-1, n-1
//T.C : O(n^2 * log(n^2)) = O(n^2 log n) because Dijkstra runs in O(E log V)
//S.C : O(n^2) for result + PQ

import java.util.*;

class Solution {
    // 4 possible directions: down, up, right, left
    int[][] directions = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};

    public int swimInWater(int[][] grid) {
        int n = grid.length;

        // result[i][j] = minimum time required to reach cell (i, j)
        int[][] result = new int[n][n];
        for (int[] row : result)
            Arrays.fill(row, Integer.MAX_VALUE); // initialize with infinity (unreachable)

        // Min-heap (priority queue) that stores: {current time, row, col}
        // The cell with the smallest "time" will always be processed first
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[0] - b[0]);

        // Starting point (0,0) - initial time = height of starting cell
        result[0][0] = grid[0][0];
        pq.offer(new int[]{grid[0][0], 0, 0});

        // Dijkstra’s loop
        while (!pq.isEmpty()) {
            int[] curr = pq.poll();   // Get the cell with the smallest current time
            int currTime = curr[0];
            int i = curr[1];
            int j = curr[2];

            // If we reached the destination (bottom-right), return the time
            if (i == n - 1 && j == n - 1)
                return currTime;

            // Skip if we have already found a better (smaller) time for this cell
            if (currTime > result[i][j])
                continue;

            // Explore all 4 neighboring cells
            for (int[] dir : directions) {
                int i_ = i + dir[0];
                int j_ = j + dir[1];

                // Check boundary limits
                if (i_ >= 0 && i_ < n && j_ >= 0 && j_ < n) {
                    // The time to move into the next cell is the max of:
                    // current time and the next cell's height
                    int nextTime = Math.max(currTime, grid[i_][j_]);

                    // If we found a faster way to reach (i_, j_)
                    if (nextTime < result[i_][j_]) {
                        result[i_][j_] = nextTime; // update the best time
                        pq.offer(new int[]{nextTime, i_, j_}); // push into priority queue
                    }
                }
            }
        }

        // This line should never be reached (problem guarantees a valid path)
        return -1;
    }
}

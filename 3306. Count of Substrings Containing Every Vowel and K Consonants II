// Approach -1 (Brute force)  TLE
//T.C : O(n^3)
//S.C : O(n^2)
class Solution {
    public long countOfSubstrings(String word, int k) {
        int n=word.length();
        int result=0;
        for(int i=0;i<n;i++){
            for(int j=i;j<n;j++){
                String sub=word.substring(i,j+1);
                if(isValid(sub,k)){
                    result++;
                }
            }
        }
        return result;
    }
    private static boolean isValid(String s,int k){
        Set<Character> vowels=new HashSet<>();
        int consonant=0;
        for(char c:s.toCharArray()){
            if(isVowels(c)){
                vowels.add(c);
            }
            else{
                consonant++;
            }
        }
        return vowels.size()==5 && consonant==k;
    }
    private static boolean isVowels(char ch){
        return ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u'; 
    }
}

//Approach (Sliding Window)
//T.C : O(2*n) ~ O(n)
//S.C : O(n)

class Solution {
    private boolean isVowel(char ch) {
        return ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u';
    }
    public long countOfSubstrings(String word, int k) {
        int n = word.length();
         // to keep count of vowels in current window
        Map<Character, Integer> mp = new HashMap<>();
        // Preprocessing to find index of next consonant
        int[] nextCons = new int[n];
        int lastConsIdx = n;
        for (int i = n - 1; i >= 0; i--) {
            nextCons[i] = lastConsIdx;
            if (!isVowel(word.charAt(i))) {
                lastConsIdx = i;
            }
        }
        int i = 0, j = 0;
        long count = 0;
        int cons = 0;
        while (j < n) {
            char ch = word.charAt(j);
            if (isVowel(ch)) {
                mp.put(ch, mp.getOrDefault(ch, 0) + 1);
            } else {
                cons++;
            } 
            while (cons > k) {
                char ci = word.charAt(i);
                if (isVowel(ci)) {
                    mp.put(ci, mp.get(ci) - 1);
                    if (mp.get(ci) == 0) {
                        mp.remove(ci);
                    }
                } else {
                    cons--;
                }
                i++;
            }
            while (i < n && mp.size() == 5 && cons == k) {
                int idx = nextCons[j];
                count += idx - j;
                char ci = word.charAt(i);
                if (isVowel(ci)) {
                    mp.put(ci, mp.get(ci) - 1);
                    if (mp.get(ci) == 0) {
                        mp.remove(ci);
                    }
                } else {
                    cons--;
                }
                i++;
            }
            j++;
        }
        return count;
    }
}

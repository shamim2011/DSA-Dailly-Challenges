//Approach-1 (Using simple conversion)
//T.C : O(n^2) - Iterating on each string and converting each character to integer
//S.C : O(n) - Using set
class Solution {
    public String findDifferentBinaryString(String[] nums) {
        HashSet<Integer> st=new HashSet<>();
        int n=nums.length;
        for(int i=0;i<n;i++){
            // insert all nums[i] as integer into st
            st.add(Integer.parseInt(nums[i],2));  
        }
        // Taking a StringBuilder string
        StringBuilder result=new StringBuilder();
        for(int i=0;i<=65536;i++){  // upto (2^n-1)
            if(!st.contains(i)){    // if 'i' does not present in set
                // store all 'i' after converting '1 or 0' as a String
                result.append(Integer.toBinaryString(i)); 
                while(result.length()<n){  //to make till length n
                    result.insert(0,'0');
                }
                return result.toString();
            }
        }
        return "";
    }
}

******* Explanation of line 19*******8
Integer.toBinaryString(number) converts the number into its binary representation, but it may not always have n bits. For example, if n = 3:

5 in binary is "101", which has 3 bits (no change needed).
3 in binary is "11", which has only 2 bits (needs a leading zero to become "011").
1 in binary is "1", which has only 1 bit (needs two leading zeros to become "001").



//Approach-2 (Improving above code)
//We no need to check from 0 to 65536. Only need to check from 0 to n
//T.C : O(n^2) - Iterating on each string and converting each character to integer
//S.C : O(n) - Using set
class Solution {
    public String findDifferentBinaryString(String[] nums) {
        HashSet<Integer> st=new HashSet<>();
        int n=nums.length;
        for(int i=0;i<n;i++){
            // insert all nums[i] as integer into st
            st.add(Integer.parseInt(nums[i],2));  
        }
        // Taking a StringBuilder string
        StringBuilder result=new StringBuilder();
        for(int i=0;i<=n;i++){  // upto n
            if(!st.contains(i)){    // if 'i' does not present in set
                // store all 'i' after converting '1 or 0' as a String
                result.append(Integer.toBinaryString(i)); 
                while(result.length()<n){  //to make till length n
                    result.insert(0,'0');
                }
                return result.toString();
            }
        }
        return "";
    }
}



//Approach-3 (By discarding matching characters in each position)
//T.C : O(n)
//S.C : O(1)

class Solution {
    public String findDifferentBinaryString(String[] nums) {
        int n=nums.length;
        StringBuilder result=new StringBuilder();
        for(int i=0;i<n;i++){
            char ch = nums[i].charAt(i); // Fix: Use nums[i] instead of nums.get(i)
            result.append(ch=='0'?'1':'0'); // Flip the character
        }
        return result.toString();
    }
}


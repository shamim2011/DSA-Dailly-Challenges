// T.C - O(2^n)
// S.C - O(n)

class Solution {
    // This list will store all the subsets (final result)
    List<List<Integer>> result = new ArrayList<>();

    // Recursive function to generate all subsets
    void solve(int[] nums, int i, List<Integer> temp) {
        // Base case: if index reaches the end of the array
        if (i >= nums.length) {
            // Add a copy of the current subset (temp) to result
            result.add(new ArrayList<>(temp));
            return;
        }

        // ------- Include current element -------
        temp.add(nums[i]);           // Choose to take nums[i]
        solve(nums, i + 1, temp);    // Recurse for next index

        // ------- Exclude current element -------
        temp.remove(temp.size() - 1); // Backtrack: remove the last element
        solve(nums, i + 1, temp);     // Recurse again without taking nums[i]
    }

    // Main function to return all subsets of the input array
    public List<List<Integer>> subsets(int[] nums) {
        List<Integer> li = new ArrayList<>(); // Temp list to build current subset
        solve(nums, 0, li);                   // Start from index 0
        return result;                        // Return all subsets collected
    }
}

//Approach (Using proper Data Structures)
// T.C. : add -> O(log n), edit -> O(log n), rmv -> O(1), execTop -> O(n log n) worst case
// S.C. : O(n)

class TaskManager {
    // Inner static class to represent a Task with priority and taskId
    private static class Task {
        int priority;
        int taskId;

        Task(int priority, int taskId) {
            this.priority = priority;
            this.taskId = taskId;
        }
    }

    // Max Heap to store tasks ordered by (priority -> higher first, then taskId -> higher first)
    PriorityQueue<Task> maxHeap;

    // Map to store the latest priority of each taskId
    Map<Integer, Integer> taskPriorityMap = new HashMap<>();

    // Map to store the userId who owns a particular taskId
    Map<Integer, Integer> taskOwnerMap = new HashMap<>();

    // Constructor: initializes TaskManager with a list of tasks
    // Each task is represented as a List: [userId, taskId, priority]
    public TaskManager(List<List<Integer>> tasks) {
        // Custom comparator for maxHeap:
        // 1. Higher priority comes first
        // 2. If same priority, higher taskId comes first
        maxHeap = new PriorityQueue<>(
            (a, b) -> {
                if (a.priority != b.priority) {
                    return b.priority - a.priority;
                }
                return b.taskId - a.taskId;
            }
        );

        // Add all initial tasks into system
        for (List<Integer> t : tasks) {
            add(t.get(0), t.get(1), t.get(2));
        }
    }

    // Add a new task into the manager
    public void add(int userId, int taskId, int priority) {
        // Push task into heap -> O(log(n))
        maxHeap.offer(new Task(priority, taskId));
        // Store/Update task priority
        taskPriorityMap.put(taskId, priority);
        // Map task to its user
        taskOwnerMap.put(taskId, userId);
    }

    // Edit the priority of an existing task
    public void edit(int taskId, int newPriority) {
        // Insert the updated version of the task into heap -> O(log(n))
        maxHeap.offer(new Task(newPriority, taskId));
        // Update task priority in map
        taskPriorityMap.put(taskId, newPriority);
    }

    // Remove a task (lazy removal: mark priority as -1)
    public void rmv(int taskId) {
        taskPriorityMap.put(taskId, -1);
    }

    // Execute the highest priority task and return the owner (userId)
    public int execTop() {
        while (!maxHeap.isEmpty()) {
            // Get top task from heap
            Task top = maxHeap.poll();
            // Fetch latest priority of this task from map
            int currPriority = taskPriorityMap.getOrDefault(top.taskId, -1);

            // If the heap task matches the latest valid priority -> it's fresh
            if (top.priority == currPriority) {
                // Mark this task as executed (invalidate it)
                taskPriorityMap.put(top.taskId, -1);
                // Return owner of this task
                return taskOwnerMap.get(top.taskId);
            }
            // Otherwise, skip stale/removed tasks
        }
        // If no valid task found
        return -1;
    }
}

/**
 * Usage:
 * TaskManager obj = new TaskManager(tasks);
 * obj.add(userId, taskId, priority);
 * obj.edit(taskId, newPriority);
 * obj.rmv(taskId);
 * int result = obj.execTop();
 */

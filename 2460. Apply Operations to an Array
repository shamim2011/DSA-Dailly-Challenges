// Approach -1 
// T.C=O(n)
// S.C= O(1)
class Solution {
    public int[] applyOperations(int[] nums) {
        int n=nums.length;
        for(int i=0;i<n-1;i++){
            // Check nums[i] & nums[i+] equal or not
            if(nums[i]==nums[i+1]){
                // Do nums[i] as nums[i]*2
                nums[i]=nums[i]*2;
                // replace '0' in nums[i+1]
                nums[i+1]=0;
            }
        }
        // Taking the non zero element in nums array starting j=0 idx & store continue
        int j=0;
        for(int i=0;i<n;i++){
            if(nums[i]!=0){
                nums[j++]=nums[i];
            }
        }
        // storing the zero element in nums array 
        for(int i=j;i<n;i++){
            nums[j++]=0;
        }
        return nums;
    }
}
// Approach -2 / Two pointer 
// T.C=O(n)
// S.C= O(1)

class Solution {
    public int[] applyOperations(int[] nums) {
        int n=nums.length;
        for(int i=0;i<n-1;i++){
            // Check nums[i] & nums[i+] equal or not
            if(nums[i]==nums[i+1]){
                // Do nums[i] as nums[i]*2
                nums[i]=nums[i]*2;
                // replace '0' in nums[i+1]
                nums[i+1]=0;
            }
        }
        // Using the two pointer approach
        int j=0;
        for(int i=0;i<n;i++){
            if(nums[i]!=0){
                if(i!=j){
                    nums[j]=nums[i];
                    nums[i]=0;
                }
                j++;
            }
        }
        return nums;
    }
}

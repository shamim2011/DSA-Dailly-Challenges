// Approach Balanced Trees + HashMaps (Simulation with TreeSet)
// T.C. : 
// MovieRentingSystem() -> O(n log n) for n entries (insert each entry into TreeSets)
// search(movie)        -> O(5) i.e. constant time to return first 5 cheapest shops
// rent(shop, movie)    -> O(log m + log r) per operation
//                         (log m to remove from available TreeSet of that movie, log r to insert into rented TreeSet)
// drop(shop, movie)    -> O(log m + log r) per operation
//                         (log m to insert back to available TreeSet, log r to remove from rented TreeSet)
// report()             -> O(5) i.e. constant time to return top 5 rented movies

// S.C. : 
// O(n + r) total
// available          -> O(n) (sum of all available movies)
// movieToShopPrice   -> O(n) (sum of all shop-price mappings)
// rented             -> O(r) (r = total rented movies)



class MovieRentingSystem {

    /**
     * Represents (price, shop) pair for available movies
     * Comparable so TreeSet can order by price -> shop
     */
    class PriceShop implements Comparable<PriceShop> {
        int price, shop;
        public PriceShop(int price, int shop) {
            this.price = price;
            this.shop = shop;
        }

        // Order by (price, then shop)
        public int compareTo(PriceShop o) {
            if (this.price != o.price) return this.price - o.price;
            return this.shop - o.shop;
        }

        @Override
        public boolean equals(Object o) {
            if (!(o instanceof PriceShop)) return false;
            PriceShop p = (PriceShop) o;
            return price == p.price && shop == p.shop;
        }

        @Override
        public int hashCode() {
            return Objects.hash(price, shop);
        }
    }

    /**
     * Represents a rented movie entry (price, shop, movie)
     * Comparable so TreeSet can order by price -> shop -> movie
     */
    class RentedMovie implements Comparable<RentedMovie> {
        int price, shop, movie;
        RentedMovie(int price, int shop, int movie) {
            this.price = price;
            this.shop = shop;
            this.movie = movie;
        }

        // Order by (price, then shop, then movie)
        public int compareTo(RentedMovie o) {
            if (this.price != o.price) return this.price - o.price;
            if (this.shop != o.shop) return this.shop - o.shop;
            return this.movie - o.movie;
        }

        @Override
        public boolean equals(Object o) {
            if (!(o instanceof RentedMovie)) return false;
            RentedMovie r = (RentedMovie) o;
            return price == r.price && shop == r.shop && movie == r.movie;
        }

        @Override
        public int hashCode() {
            return Objects.hash(price, shop, movie);
        }
    }

    // movie -> sorted set of available (price, shop)
    Map<Integer, TreeSet<PriceShop>> available;

    // movie -> {shop -> price} for quick lookup
    Map<Integer, Map<Integer, Integer>> movieToShopPrice;

    // sorted set of rented movies (price, shop, movie)
    TreeSet<RentedMovie> rented;

    /** Initialize system with n shops and entries (shop, movie, price) */
    public MovieRentingSystem(int n, int[][] entries) {
        available = new HashMap<>();
        movieToShopPrice = new HashMap<>();
        rented = new TreeSet<>();

        // Fill available structures
        for (int[] e : entries) {
            int shop = e[0], movie = e[1], price = e[2];
            available.computeIfAbsent(movie, k -> new TreeSet<>())
                     .add(new PriceShop(price, shop));
            movieToShopPrice.computeIfAbsent(movie, k -> new HashMap<>())
                            .put(shop, price);
        }
    }

    /**
     * Search for up to 5 cheapest shops for a given movie
     */
    public List<Integer> search(int movie) {
        List<Integer> res = new ArrayList<>();
        int count = 0;

        if (available.containsKey(movie)) {
            for (PriceShop ps : available.get(movie)) {
                res.add(ps.shop);
                count++;
                if (count >= 5) break;
            }
        }
        return res;
    }

    /**
     * Rent a movie: remove from available and add to rented
     */
    public void rent(int shop, int movie) {
        int price = movieToShopPrice.get(movie).get(shop);
        available.get(movie).remove(new PriceShop(price, shop));
        rented.add(new RentedMovie(price, shop, movie));
    }

    /**
     * Drop a rented movie: remove from rented and put back to available
     */
    public void drop(int shop, int movie) {
        int price = movieToShopPrice.get(movie).get(shop);
        available.get(movie).add(new PriceShop(price, shop));
        rented.remove(new RentedMovie(price, shop, movie));
    }

    /**
     * Report up to 5 cheapest rented movies
     */
    public List<List<Integer>> report() {
        List<List<Integer>> res = new ArrayList<>();
        int count = 0;

        for (RentedMovie rm : rented) {
            res.add(Arrays.asList(rm.shop, rm.movie));
            count++;
            if (count >= 5) break;
        }
        return res;
    }
}

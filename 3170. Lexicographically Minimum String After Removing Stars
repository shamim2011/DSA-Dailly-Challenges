//Simple approach using heap
//T.C : O(nlogn)
//S.C : O(n)

// Custom class to store a character and its original index
class P {
    public char c;  // The character itself
    // The index of the character in the original string
    public int i;  

    // Constructor to initialize the character and index
    public P(char c, int i) {
        this.c = c;
        this.i = i;
    }
}

class Solution {
    public String clearStars(String s) {

        // Convert the input string to a character array for easy modification
        char[] str = s.toCharArray();

        // PriorityQueue to keep track of characters to be potentially removed by '*'
        // Sorting logic:
        // 1. First by character (lexicographically smallest comes first)
        // 2. If characters are equal, one with larger index comes first (so that earlier one is deleted)
        Queue<P> pq = new PriorityQueue<>((a, b) -> {
            if (a.c == b.c) {
                // If same character, compare by descending index
                return b.i - a.i;
            }
            // Otherwise, lexicographically
            return Character.compare(a.c, b.c); 
        });

        // Iterate through the character array
        for (int i = 0; i < str.length; i++) {
            if (str[i] != '*') {
                // If current character is not '*', 
                // add it to the priority queue with its index
                pq.add(new P(str[i], i));
                continue;
            }

            // If current character is '*',
            //  remove the smallest lexicographical character seen so far
            if (!pq.isEmpty()) {
                // Get the character to be removed
                P p = pq.poll();    
                // Mark the original character's position as '*'
                str[p.i] = '*';      
            }
        }

        // Build the final result string by skipping all '*'
        StringBuilder res = new StringBuilder();
        for (char ch : str) {
            if (ch != '*') {
                res.append(ch);  // Only append non-'*' characters
            }
        }

        // Return the final string after all removals
        return res.toString();
    }
}

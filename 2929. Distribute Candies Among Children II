//Approach 1 - Using Recursive  TLE
//T.C : O((min(n,limit)+1)^3 )
//S.C : O(1)

class Solution {
    long solve(int countChild,int n,int limit){
        if(countChild == 3){
            if(n==0){
                return 1;
            }
            return 0;
        }
        long ways = 0;
        for(int assign = 0; assign<=Math.min(n,limit); assign++){
            if(n-assign<0) continue;
            ways+=solve(countChild+1,n-assign,limit);
        }
        return ways;
    }
    public long distributeCandies(int n, int limit) {
        return solve(0,n,limit);
    }
}



//Approach 2 - Using Brute Force Enumeration  TLE
//T.C : O((limit+1)^3 )
//S.C : O(1)

class Solution {
    
    public long distributeCandies(int n, int limit) {
        long ways = 0;
        for(int ch1 = 0;ch1<=Math.min(n,limit);ch1++){
            for(int ch2 = 0;ch2<=Math.min(n-ch1,limit);ch2++){
                for(int ch3 = 0;ch3<=Math.min(n-ch1-ch2,limit);ch3++){
                    if(ch1+ch2+ch3==n){
                        ways++;
                    }
                }
            }
        }
        return ways;
    }
}



//Approach 3 - (Brute Force Enumeration)  TLE
//T.C : O(limit^2)
//S.C : O(1)

class Solution {
    
    public long distributeCandies(int n, int limit) {
        long ways = 0;
        for(int ch1 = 0;ch1<=Math.min(n,limit);ch1++){
            for(int ch2 = 0;ch2<=Math.min(n-ch1,limit);ch2++){
                int ch3 = (n-ch1-ch2);
                if (ch3 >= 0 && ch3 <= limit) {
                    ways++;
                }
            }
        }
        return ways;
    }
}


//Approach - Using maths distribution
//T.C : O(n)
//S.C : O(1)

class Solution {
    
    public long distributeCandies(int n, int limit) {
        long ways = 0;

        // The number of candies for child 1 must be between:
        // max(0, n - 2*limit) and min(n, limit)
        // This ensures that the remaining candies 
        // for child 2 and 3 can still be within limits.
        int minCh1 = Math.max(0, n - 2 * limit);
        int maxCh1 = Math.min(n, limit);

        // Iterate over all valid values for child 1
        for (int x = minCh1; x <= maxCh1; x++) {
            int remaining = n - x; // Candies left for child 2 and 3

            // For child 2, determine valid range:
            // Minimum = max(0, remaining - limit) to ensure 
            // child 3 doesn’t get more than limit
            
            // Maximum = min(remaining, limit) to ensure 
            // child 2 doesn’t get more than limit
            int minCh2 = Math.max(0, remaining - limit);
            int maxCh2 = Math.min(remaining, limit);

            // Number of valid (ch2, ch3) pairs is (maxCh2 - minCh2 + 1)
            ways += (maxCh2 - minCh2 + 1);
        }

        return ways;
    }
}

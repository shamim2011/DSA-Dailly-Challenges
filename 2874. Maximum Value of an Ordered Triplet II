Approach - 1 ()   ---> Same code of 2874
// T.C O(n)
// S.C - O(1)

class Solution {
    public long maximumTripletValue(int[] nums) {
        int n = nums.length; // Get the length of the array
        long result = 0; // Variable to store the maximum triplet value
        long maxDiff = 0; // Variable to store the maximum difference (maxi - nums[k])
        long maxi = 0; // Variable to keep track of the maximum element seen so far

        // Iterate through the array
        for (int k = 0; k < n; k++) {
            result = Math.max(result, maxDiff * nums[k]); // Calculate and update the maximum triplet value
            maxDiff = Math.max(maxDiff, maxi - nums[k]); // Update maxDiff with the largest difference (maxi - nums[k])
            maxi = Math.max(maxi, (long) nums[k]); // Update maxi to the maximum value seen so far
        }
        
        return result; // Return the maximum triplet value
    }
}


Approach - 2 ()   ---> Same code of 2874
// T.C O(n)
// S.C - O(n)

class Solution {
    public long maximumTripletValue(int[] nums) {
        int n = nums.length;
        
        // Arrays to store the maximum values on the left and right of each element
        int[] leftMaxi = new int[n];  // leftMaxi[i] stores the maximum value in nums[0...i-1]
        int[] rightMaxk = new int[n]; // rightMaxk[i] stores the maximum value in nums[i+1...n-1]

        // Populate the leftMaxi array
        for (int i = 1; i < n; i++) {
            leftMaxi[i] = Math.max(leftMaxi[i - 1], nums[i - 1]);
        }

        // Populate the rightMaxk array
        for (int i = n - 2; i >= 0; i--) {
            rightMaxk[i] = Math.max(rightMaxk[i + 1], nums[i + 1]);
        }

        long result = 0;

        // Iterate over the array, treating nums[j] as the middle element
        for (int j = 1; j < n - 1; j++) { // j must be in range [1, n-2] for a valid triplet
            // Calculate the triplet value (leftMaxi[j] - nums[j]) * rightMaxk[j]
            result = Math.max(result, (long) (leftMaxi[j] - nums[j]) * rightMaxk[j]);
        }

        return result; // Return the maximum triplet value found
    }
}

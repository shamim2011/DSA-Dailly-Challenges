// Approach-1 (Using map)
// T.C : O(n)
// S.C : O(n)

class Solution {
    public boolean divideArray(int[] nums) {
        Map<Integer,Integer> mp=new HashMap<>();
        int N=nums.length;
        for(int i=0;i<N;i++){
            mp.put(nums[i],mp.getOrDefault(nums[i],0)+1);
        }
        int count=0;
        for(Map.Entry<Integer,Integer> entry:mp.entrySet()){
            if(entry.getValue()%2 == 0){
                count+=entry.getValue()/2;
            }
        }
        return count == N/2;
    }
}

// Approach-2 (Using set)
// T.C : O(n)
// S.C : O(n)

class Solution {
    public boolean divideArray(int[] nums) {
        Set<Integer> st=new HashSet<>();

        for(int x:nums){
            if(st.contains(x)){
                st.remove(x);
            }
            else{
                st.add(x);
            }
        }
        return st.isEmpty();
    }
}

// Approach-3 (Using boolean array)
// T.C : O(n)
// S.C : O(501) ~ O(1)

class Solution {
    public boolean divideArray(int[] nums) {
        boolean[] paired=new boolean[501];
        Arrays.fill(paired,true);

        for(int x:nums){
            if(paired[x] = !paired[x]);
        }
        for(int i=0;i<501;i++){
            if(!paired[i]){
                return false;
            }
        }
        return true;
    }
}

// Approach-4 (Using sorting and comparing)
// T.C : O(nlogn)
// S.C : O(1)
class Solution {
    public boolean divideArray(int[] nums) {
        int n=nums.length;
        Arrays.sort(nums);
        for(int i=1;i<n;i+=2){
            if(nums[i] != nums[i-1]){
                return false;
            }
        }
        return true;
    }
}

// Approach-5 (Using sorting and xor)
// T.C : O(nlogn)
// S.C : O(1)

class Solution {
    public boolean divideArray(int[] nums) {
        Arrays.sort(nums);
        for(int i=1;i<nums.length;i+=2){
            if((nums[i] ^ nums[i-1] )!= 0){
                return false;
            }
        }
        return true;
    }
}

//Approach-1 Recursion with Memoization (Top-Down DP):  TLE
//T.C :O(n * k)
//S.C : O(n * k)


class Solution {
    int n;           // Length of the input string
    // DP table to memoize results: dp[i][k] = max length at index i with value â‰¤ k
    int[][] dp;     

    // Recursive helper function with memoization
    private int solve(String s, int k, int i) {
        // Base case: if we've processed all characters
        if (i < 0) {
            return 0;
        }

        // If already computed, return memoized result
        if (dp[i][k] != -1) return dp[i][k];

        int take = 0;
        int bit = s.charAt(i) - '0';  // Convert char '0'/'1' to int 0/1

        // Compute binary value if the bit is 1; else it's 0
        long val = (bit == 1 ? 1L << (n - i - 1) : 0);

        // Option 1: take current bit, only if its value doesn't exceed k
        if (val <= k) {
            // Include current bit and reduce k accordingly
            take = 1 + solve(s, (int)(k - val), i - 1);
        }

        // Option 2: skip current bit
        int skip = solve(s, k, i - 1);

        // Store and return the best of the two choices
        return dp[i][k] = Math.max(take, skip);
    }

    // Main function
    public int longestSubsequence(String s, int k) {
        n = s.length();  // Store string length

        // Initialize memoization table with -1
        dp = new int[n][k + 1];
        for (int i = 0; i < n; i++) {
            Arrays.fill(dp[i], -1);
        }

        // Start recursion from last index
        return solve(s, k, n - 1);
    }
}



//Approach-2 (Using Greedy)
//T.C : O(n)
//S.C : O(1)

class Solution {
    public int longestSubsequence(String s, int k) {
        int n = s.length();
        int length = 0;  
        // Represents the value of binary digits from right to left (1, 2, 4, 8, ...)   
        int powerVal = 1;

        // Traverse the string from right to left (least significant to most significant bit)
        for (int i = n - 1; i >= 0; i--) {
            // If the current character is '0', it adds no value in binary
            // So we can include it without changing the value, hence increase length
            if (s.charAt(i) == '0') {
                length++;
            }
            // If it's '1', we consider including it only if the current binary value is <= k
            else if (powerVal <= k) {
                k -= powerVal;  // Deduct the current binary value from k
                length++;       // Include this '1' in the subsequence
            }

            // Update the binary power for the next bit to the left (double it)
            // Only update if current power is still <= k to prevent overflow
            if (powerVal <= k) {
                powerVal *= 2;
            }
        }

        // Return the total length of the longest valid binary subsequence <= k
        return length;
    }
}

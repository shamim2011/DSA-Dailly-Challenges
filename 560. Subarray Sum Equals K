// Approach -Better Brut force method
// T.C - O(n^2)
// S.C - O(1)

class Solution {
    public int subarraySum(int[] nums, int k) {
        int count=0;
        int n=nums.length;
        for(int i=0;i<n;i++){
            int sum=0;
            for(int j=i;j<n;j++){
                sum+=nums[j];
                if(sum==k){
                    count++;
                }
            }   
        }
        return count;
    }
}


// Approach -2 
// T.C - O(n)
// S.C - O(1)
class Solution {
    public int subarraySum(int[] nums, int k) {
        int n=nums.length;
        int result=0;
        int sum=0;
        Map<Integer,Integer> mp=new HashMap<>();
        mp.put(0,1);
        for(int i=0;i<n;i++){
            sum+=nums[i];
            if(mp.containsKey(sum-k)){
                result+=mp.get(sum-k);
            }
            mp.put(sum, mp.getOrDefault(sum, 0) + 1);
        }
        return result;
    }
}

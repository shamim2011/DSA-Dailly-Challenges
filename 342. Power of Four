Given an integer n, return true if it is a power of four. Otherwise, return false.

An integer n is a power of four, if there exists an integer x such that n == 4x.

//Approach-1 (Simplest for loop)
//T.C : log(n) to base 4

class Solution {
    public boolean isPowerOfFour(int n) {
        if(n<0 || n==0){
            return false;
        }
        while(n%4==0){
            n=n/4;
        }
        return n==1;
    }
}


// Approach 2 - Base-4 Representation
// T.C - O(log n)
// S.c - O(1)

class Solution {
    public boolean isPowerOfFour(int n) {
        // Negative numbers or zero can't be powers of four
        if (n <= 0) {
            return false;
        }

        int count1 = 0; // Will store the sum of remainders when dividing by 4

        // Keep dividing n by 4 until n becomes 0
        while (n > 0) {
            // Add the remainder of n when divided by 4
            // If n is a power of four, this remainder should be 0 until we reach 1
            count1 += n % 4;

            // Divide n by 4 for the next step
            n = n / 4;
        }

        // If the sum of remainders is greater than 1, 
        // it means n had more than one non-zero digit in base 4 â†’ not a power of four
        return count1 <= 1;
    }
}



 


//Approach-4 (Using Bit and Maths)
//T.C : O(1)
class Solution {
    public boolean isPowerOfFour(int n) {
       /*
          num & (num - 1) == 0 : This checks if the number is a power of 2.
          (n - 1) % 3          : All numbers that are powers of 4 have this property. For example, 4^1 - 1 = 3, 4^2 - 1 = 15, 4^3 - 1 = 63, and so on.
          Maths proff of (n-1)%3 
          Consider three consecutive numbers: n, n+1, and n+2, where n is any integer. If n is a multiple of 3, then it is itself divisible by 3. 
          If n is one more than a multiple of 3, i.e., n=3k+1 for some integer k, 
          then n+2 = 3k+3 = 3(k+1) is a multiple of 3. 
          If n is two more than a multiple of 3, i.e., n=3k+2 for some integer kk, 
          then n+1 = 3k+3 = 3(k+1) is a multiple of 3.
      */
        return n > 0 && (n & (n - 1)) == 0 && (n - 1) % 3 == 0;
    }
}

Given an integer n, return true if it is a power of four. Otherwise, return false.

An integer n is a power of four, if there exists an integer x such that n == 4x.

//Approach-1 (Simplest for loop)
//T.C : log(n) to base 4

class Solution {
    public boolean isPowerOfFour(int n) {
        if(n<0 || n==0){
            return false;
        }
        while(n%4==0){
            n=n/4;
        }
        return n==1;
    }
}


// Approach 2 - Base-4 Representation
// T.C - O(log n)
// S.c - O(1)

class Solution {
    public boolean isPowerOfFour(int n) {
        // Negative numbers or zero can't be powers of four
        if (n <= 0) {
            return false;
        }

        int count1 = 0; // Will store the sum of remainders when dividing by 4

        // Keep dividing n by 4 until n becomes 0
        while (n > 0) {
            // Add the remainder of n when divided by 4
            // If n is a power of four, this remainder should be 0 until we reach 1
            count1 += n % 4;

            // Divide n by 4 for the next step
            n = n / 4;
        }

        // If the sum of remainders is greater than 1, 
        // it means n had more than one non-zero digit in base 4 â†’ not a power of four
        return count1 <= 1;
    }
}



//Approach-3 (Using Maths)
//T.C : O(log(a)) -> pow(4, a),the exponentiation operation still requires logarithmic time with respect to the value of a.
class Solution {
    public boolean isPowerOfFour(int n) {
        if (n <= 0) {
            return false;
        }
        
        int a = (int) (Math.log(n) / Math.log(4));
        /*
            4^a = n
            a = log(n) to base 4
            a = log(n) to base e / log(4) to base e
        */
        
        return n == Math.pow(4, a);
    }
}



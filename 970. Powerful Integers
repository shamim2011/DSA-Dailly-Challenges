class Solution {        // Wrong Ans
    public List<Integer> powerfulIntegers(int x, int y, int bound) {
        List<Integer> res = new ArrayList<>();
        Set<Integer> st = new HashSet<>();
        for(int i=0;i<=y;i++){
            for(int j=0;j<=x;j++){
                int ans = (int)(Math.pow(x,i) + Math.pow(y,j));
                if(ans<=bound){
                    st.add(ans);
                }
            }
        }
        for(int s:st){
            res.add(s);
        }
        return res;
    }
}

////////// SOLVED PASSED  ///////////

class Solution {
    public List<Integer> powerfulIntegers(int x, int y, int bound) {
        Set<Integer> resultSet = new HashSet<>();

        // Try all combinations of powers of x and y such that x^i + y^j <= bound
        for (int i = 0; Math.pow(x, i) <= bound; i++) {
            for (int j = 0; Math.pow(y, j) <= bound; j++) {
                int value = (int)(Math.pow(x, i) + Math.pow(y, j));
                if (value <= bound) {
                    resultSet.add(value);
                }
                // If y is 1, further powers won't change (1^1 = 1^2 = ... = 1), break loop
                if (y == 1) break;
            }
            // If x is 1, further powers won't change, break loop
            if (x == 1) break;
        }

        return new ArrayList<>(resultSet);
    }
}


/// Optimal Approach ///

class Solution {           // SOLVED PASSED
    public List<Integer> powerfulIntegers(int x, int y, int bound) {
        Set<Integer> result = new HashSet<>();

        int xi = 1;
        for (int i = 0; xi < bound; i++) {
            int yj = 1;
            for (int j = 0; xi + yj <= bound; j++) {
                result.add(xi + yj);
                if (y == 1) break;
                yj *= y;
            }
            if (x == 1) break;
            xi *= x;
        }

        return new ArrayList<>(result);
    }
}

Given an integer n, return true if it is a power of three. Otherwise, return false.

An integer n is a power of three, if there exists an integer x such that n == 3x


//Approach-1 (Simplest for loop)
//T.C : log(n) to base 3
class Solution {
    public boolean isPowerOfThree(int n) {
        if(n<0 || n==0){
            return false;
        }
        while(n%3==0){
            n=n/3;
        }
        if(n==1){
            return true;
        }
        else{
            return false;
        }
    }
}
//Approach-2 (Using Maths)
//T.C : O(log(a)) -> pow(3, a),the exponentiation operation still requires logarithmic time with respect to the value of a.
class Solution {
    public boolean isPowerOfThree(int n) {
        if (n <= 0) {
            return false;
        }
        // Check if log(n) / log(3) is an integer
        double a = Math.log(n) / Math.log(3);
        // Verify if a is an integer by checking if it's very close to the nearest integer
        return Math.abs(a - Math.round(a)) < 1e-10;
    }
}


// Approach 3 - Base-3 Representation
// T.C - O(log n)
// S.c - O(1)

class Solution {
    public boolean isPowerOfThree(int n) {
        // Special case: 1 is 3^0, so it's a power of three
        if (n == 1) return true;

        // Negative numbers or 0 can never be powers of three
        if (n <= 0) return false;

        int countNonZeroDigits = 0; // To count non-zero digits in base-3 form

        // Keep dividing by 3 to simulate base-3 conversion
        while (n > 0) {
            int remainder = n % 3; // Current base-3 digit

            // Add remainder to count (if remainder > 0)
            countNonZeroDigits += remainder;

            // Divide by 3 to process the next digit
            n /= 3;
        }

        // A power of three must have only ONE non-zero digit in base-3
        return (countNonZeroDigits == 1);
    }
}

//T.C : O(m*n)
//S.C : O(m*n)

class Solution {
    public String shortestCommonSupersequence(String s1, String s2) {
        int m=s1.length();
        int n=s2.length();
        int[][] dp = new int[m + 1][n + 1];

        for (int i = 0; i < m + 1; i++) {
            for (int j = 0; j < n + 1; j++) {
                if (i == 0 || j == 0)
                    dp[i][j] = i + j;
                else if (s1.charAt(i - 1) == s2.charAt(j - 1))
                    dp[i][j] = 1 + dp[i - 1][j - 1];
                else
                    dp[i][j] = 1 + Math.min(dp[i - 1][j], dp[i][j - 1]);
            }
        }
        // Store the s1 and s2 character in reverse order
        StringBuilder scs_b=new StringBuilder();
        int i = m, j = n;
        while (i > 0 && j > 0) {
            if (s1.charAt(i - 1) == s2.charAt(j - 1)) {
                scs_b.append(s1.charAt(i - 1));
                i--;
                j--;
            }
            else{
                if (dp[i - 1][j] < dp[i][j - 1]){     //   -->  --> move to the Up of the matrix
                    scs_b.append(s1.charAt(i - 1));
                    i--;
                }
                else{    // dp[i-1][j]>dp[i][j-1]   --> move to the left of the matrix
                    scs_b.append(s2.charAt(j - 1));
                    j--;
                }
            }
        }
        // For the remaining Character    [0][j] / [i][0]
        while(i > 0){   //  [i][0]  
            scs_b.append(s1.charAt(i - 1));
            i--;
        }
        while( j > 0){   //  [0][j]  
            scs_b.append(s2.charAt(j - 1));
            j--;
        }
        // StringBuilder store the character in reverse so we reverese all char and get output
        return scs_b.reverse().toString();
    }
}

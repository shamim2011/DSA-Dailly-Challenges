// Approach - 1 In-place Two-Pass Marking using a Sentinel Value  TLE
// T C: O(m × n)
// S C: O(1)

class Solution {
    public void setZeroes(int[][] matrix) {
        int m = matrix.length;           // Number of rows
        int n = matrix[0].length;        // Number of columns
        int mark = Integer.MIN_VALUE + 1; // Unique marker value (unlikely to be in input)

        // First pass: mark the rows and columns that need to be zeroed
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {

                // If the current cell is zero, we mark its row and column
                if (matrix[i][j] == 0) {

                    // Mark the entire row i (except actual zeroes)
                    for (int k = 0; k < n; k++) {
                        if (matrix[i][k] != 0) {
                            matrix[i][k] = mark; // Use marker instead of setting to 0 directly
                        }
                    }

                    // Mark the entire column j (except actual zeroes)
                    for (int k = 0; k < m; k++) {
                        if (matrix[k][j] != 0) {
                            matrix[k][j] = mark; // Same here
                        }
                    } 
                }
            }
        }

        // Second pass: convert all marker values to actual zeroes
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (matrix[i][j] == mark) {
                    matrix[i][j] = 0;
                }
            }
        }
    }
}

//Approch-2 (Using extra space of m*n)
//T.C : O(m*n*(m+n))
//S.C : O(m*n)

class Solution {
    public void setZeroes(int[][] matrix) {
        int m = matrix.length;           // Number of rows
        int n = matrix[0].length;        // Number of columns

        // Step 1: Create a temporary copy of the original matrix
        int[][] temp = new int[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                temp[i][j] = matrix[i][j]; // Copy original values
            }
        }

        // Step 2: Scan the original matrix for zeroes
        // and mark entire row and column as zero in the temp matrix
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (matrix[i][j] == 0) {
                    // Set entire row i to 0 in temp
                    for (int k = 0; k < n; k++) {
                        temp[i][k] = 0;
                    }

                    // Set entire column j to 0 in temp
                    for (int k = 0; k < m; k++) {
                        temp[k][j] = 0;
                    }
                }
            }
        }

        // Step 3: Copy modified temp matrix back to the original matrix
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                matrix[i][j] = temp[i][j]; // Overwrite original matrix
            }
        }
    }
}


//Approch-3 (Two-pass approach using extra row and column marker arrays)
//T.C : O(m × n)
//S.C : O(m+n)


class Solution {
    public void setZeroes(int[][] matrix) {
        int m = matrix.length;           // Number of rows
        int n = matrix[0].length;        // Number of columns

        // Step 1: Create two boolean arrays to track which rows and columns contain zeroes
        boolean[] rows = new boolean[m]; // To mark rows that need to be zeroed
        Arrays.fill(rows, false);        // Initialize all to false

        boolean[] cols = new boolean[n]; // To mark columns that need to be zeroed
        Arrays.fill(cols, false);        // Initialize all to false

        // Step 2: First pass — identify rows and columns that contain at least one zero
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (matrix[i][j] == 0) {
                    rows[i] = true;      // Mark this row
                    cols[j] = true;      // Mark this column
                }
            }
        }

        // Step 3: Second pass — set matrix[i][j] to zero if either its row or column is marked
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (rows[i] == true || cols[j] == true) {
                    matrix[i][j] = 0;    // Set cell to zero
                }
            }
        }
    }
}

//Approach-4 (In place constant space)
//T.C : O(m*n)
//S.C : O(1)

class Solution {
    public void setZeroes(int[][] matrix) {
        int m = matrix.length;         // Number of rows
        int n = matrix[0].length;      // Number of columns

        boolean firstRowZero = false;  // Flag to track if first row needs to be zeroed
        boolean firstColZero = false;  // Flag to track if first column needs to be zeroed

        // Step 1: Check if first column contains any zero
        for (int i = 0; i < m; i++) {
            if (matrix[i][0] == 0) {
                firstColZero = true;
            }
        }

        // Step 2: Check if first row contains any zero
        for (int j = 0; j < n; j++) {
            if (matrix[0][j] == 0) {
                firstRowZero = true;
            }
        }

        // Step 3: Use first row and column as markers
        // Mark row i and column j as zero if matrix[i][j] == 0
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                if (matrix[i][j] == 0) {
                    matrix[i][0] = 0; // Mark corresponding row
                    matrix[0][j] = 0; // Mark corresponding column
                }
            }
        }

        // Step 4: Zero out cells based on markers in the first row and column
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                if (matrix[i][0] == 0 || matrix[0][j] == 0) {
                    matrix[i][j] = 0;
                }
            }
        }

        // Step 5: Zero out the first row if needed
        if (firstRowZero) {
            for (int j = 0; j < n; j++) {
                matrix[0][j] = 0;
            }
        }

        // Step 6: Zero out the first column if needed
        if (firstColZero) {
            for (int i = 0; i < m; i++) {
                matrix[i][0] = 0;
            }
        }
    }
}



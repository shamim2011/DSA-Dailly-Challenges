// Brute Force method
// T.C=O(k)-getProduct(int k),    O(1)-add(num)
// S.C=O(n)   for the stream
class ProductOfNumbers {
    ArrayList<Integer>list=new ArrayList<>();

    public ProductOfNumbers() {
        
    }
    
    public void add(int num) {
        list.add(num);
    }
    
    public int getProduct(int k) {
        int n=list.size();
        int pro=1;
        for(int i=n-k;i<n;i++){
            pro=pro*list.get(i);
        }
        return pro;
    }
}

/**
 * Your ProductOfNumbers object will be instantiated and called as such:
 * ProductOfNumbers obj = new ProductOfNumbers();
 * obj.add(num);
 * int param_2 = obj.getProduct(k);
 */


// Optimal Solution
// T.C=O(1)-getProduct(int k),    O(1)-add(num)
// S.C=O(n)   for the stream
class ProductOfNumbers {
    ArrayList<Integer>list=new ArrayList<>();
    int n=0;
    public ProductOfNumbers() {

    } 
    public void add(int num) {
        if(num==0){
            list.clear();
            n=0;
        }
        else{
            if(list.isEmpty()){
                list.add(num);
            }
            else{
                list.add(num*list.get(n-1));
            }
            n++;
        }
    }
    public int getProduct(int k) {
        if(k>n){
            return 0;
        }
        else if(k==n){
            return list.get(n-1);
        }
        return list.get(n-1)/list.get(n-k-1);
    }
}




